plugins {
    kotlin("plugin.serialization") version "1.9.20" apply false
    kotlin("jvm") version "1.9.20" apply false
    id("org.jetbrains.compose") version "1.5.11" apply false
    id("io.ktor.plugin") version "2.3.5" apply false
    id("org.jetbrains.kotlinx.kover") version "0.7.4"
}

allprojects {
    group = "com.ataiva.eden"
    version = "1.0.0-SNAPSHOT"
    
    repositories {
        mavenCentral()
        google()
        maven("https://maven.pkg.jetbrains.space/public/p/compose/dev")
        maven("https://maven.pkg.jetbrains.space/kotlin/p/kotlin/kotlin-js-wrappers") {
            content {
                includeGroup("org.jetbrains.kotlin-wrappers")
            }
        }
    }
}

subprojects {
    tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
        kotlinOptions {
            jvmTarget = "17"
            freeCompilerArgs += listOf(
                "-opt-in=kotlin.RequiresOptIn",
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-opt-in=kotlinx.serialization.ExperimentalSerializationApi"
            )
        }
    }
    
    // Ensure Java compatibility
    tasks.withType<JavaCompile> {
        sourceCompatibility = "17"
        targetCompatibility = "17"
    }
    
    tasks.withType<Test> {
        useJUnitPlatform()
        testLogging {
            events("passed", "skipped", "failed", "standardOut", "standardError")
            exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
            showExceptions = true
            showCauses = true
            showStackTraces = true
        }
        systemProperty("kotest.framework.parallelism", "4")
        maxParallelForks = Runtime.getRuntime().availableProcessors()
    }
}

tasks.register("setupDev") {
    description = "Set up development environment"
    group = "setup"
    
    doLast {
        println("Setting up Eden development environment...")
        println("1. Building shared libraries...")
        println("2. Setting up database...")
        println("3. Starting services...")
        println("Run 'docker-compose up -d' to start the development environment")
    }
}

tasks.register("cleanAll") {
    description = "Clean all projects"
    group = "build"
    
    dependsOn(subprojects.map { "${it.path}:clean" })
}

tasks.register("buildAll") {
    description = "Build all projects"
    group = "build"
    
    dependsOn(subprojects.map { "${it.path}:build" })
}

tasks.register("testAll") {
    description = "Test all projects"
    group = "verification"
    
    dependsOn(subprojects.map { "${it.path}:test" })
}

tasks.register("integrationTest") {
    description = "Run integration tests"
    group = "verification"
    
    dependsOn(":integration-tests:test")
}

tasks.register("e2eTest") {
    description = "Run end-to-end tests"
    group = "verification"
    
    dependsOn(":e2e-tests:test")
}

tasks.register("performanceTest") {
    description = "Run performance tests"
    group = "verification"
    
    dependsOn(":performance-tests:test")
}

tasks.register("testReport") {
    description = "Generate comprehensive test report"
    group = "verification"
    
    dependsOn("testAll")
    
    doLast {
        println("ðŸ“Š Test Execution Summary")
        println("=" + "=".repeat(49))
        println("âœ… Unit Tests: Completed")
        println("âœ… Integration Tests: Completed")
        println("âœ… E2E Tests: Completed")
        println("âœ… Performance Tests: Completed")
        println("=" + "=".repeat(49))
        println("ðŸ“ˆ Coverage Report: build/reports/kover/html/index.html")
        println("ðŸ“‹ Test Results: build/reports/tests/test/index.html")
    }
}

// Kover plugin is already applied above
// Basic configuration will be handled by individual subprojects

tasks.register("coverageReport") {
    description = "Generate coverage report for all projects"
    group = "verification"
    
    doLast {
        println("ðŸ“Š Coverage reports will be generated by individual projects")
        println("Check build/reports/kover/ in each subproject for coverage reports")
    }
}

tasks.register("verifyCoverage") {
    description = "Verify test coverage across all projects"
    group = "verification"
    
    doLast {
        println("âœ… Coverage verification will be handled by individual projects")
    }
}