name: Eden DevOps Suite CD

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      environment: ${{ steps.get-environment.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Get version from tag
      id: get-version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "version=$(date +'%Y%m%d%H%M%S')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        fi
    
    - name: Determine environment
      id: get-environment
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: prepare
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ataivadev/eden:${{ needs.prepare.outputs.version }}
          ataivadev/eden:latest
        cache-from: type=registry,ref=ataivadev/eden:buildcache
        cache-to: type=registry,ref=ataivadev/eden:buildcache,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    if: needs.prepare.outputs.environment == 'staging'
    # Deployment to staging environment
    
    steps:
    - name: Deploy to Staging
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/eden
          docker-compose pull
          docker-compose down
          export EDEN_VERSION=${{ needs.prepare.outputs.version }}
          docker-compose up -d
          docker system prune -af
    
    - name: Run smoke tests
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/eden
          ./scripts/run-smoke-tests.sh

  deploy-production:
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    if: needs.prepare.outputs.environment == 'production'
    # Deployment to production environment
    
    steps:
    - name: Deploy to Production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/eden
          docker-compose pull
          docker-compose down
          export EDEN_VERSION=${{ needs.prepare.outputs.version }}
          docker-compose up -d
          docker system prune -af
    
    - name: Run smoke tests
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/eden
          ./scripts/run-smoke-tests.sh
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        name: Eden DevOps Suite ${{ needs.prepare.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true