name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2
  JAVA_VERSION: '17'

jobs:
  test-jvm:
    name: JVM Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: eden_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run JVM tests
      run: ./gradlew jvmTest --continue --parallel
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/eden_test
        DATABASE_USER: testuser
        DATABASE_PASSWORD: testpass
        REDIS_URL: redis://localhost:6379

    - name: Generate JVM test report
      run: ./gradlew testReport
      if: always()

    - name: Upload JVM test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jvm-test-results
        path: |
          **/build/reports/tests/
          **/build/test-results/

  test-js:
    name: JS Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run JS tests
      run: ./gradlew jsTest --continue --parallel

    - name: Upload JS test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: js-test-results
        path: |
          **/build/reports/tests/
          **/build/test-results/

  test-native:
    name: Native Tests
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: linuxX64Test
          - os: macos-latest
            target: macosX64Test
          - os: windows-latest
            target: mingwX64Test
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew (Unix)
      if: runner.os != 'Windows'
      run: chmod +x gradlew

    - name: Run Native tests
      run: ./gradlew ${{ matrix.target }} --continue
      shell: bash

    - name: Upload Native test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: native-test-results-${{ matrix.os }}
        path: |
          **/build/reports/tests/
          **/build/test-results/

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test-jvm, test-js]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: eden_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run all tests for coverage
      run: ./gradlew test --continue --parallel
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/eden_test
        DATABASE_USER: testuser
        DATABASE_PASSWORD: testpass

    - name: Generate coverage report
      run: ./gradlew koverHtmlReport koverXmlReport

    - name: Verify coverage threshold
      run: ./gradlew koverVerify
      continue-on-error: true
      id: coverage-check

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          **/build/reports/kover/
          **/build/reports/jacoco/

    - name: Comment coverage results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find coverage report
          const coverageFile = 'build/reports/kover/html/index.html';
          if (fs.existsSync(coverageFile)) {
            const coverage = fs.readFileSync(coverageFile, 'utf8');
            // Extract coverage percentage (simplified)
            const match = coverage.match(/(\d+(?:\.\d+)?)%/);
            const percentage = match ? match[1] : 'Unknown';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 Test Coverage Report\n\nCoverage: ${percentage}%\n\n${{ steps.coverage-check.outcome == 'success' && '✅ Coverage threshold met' || '❌ Coverage below threshold (100% required)' }}`
            });
          }

    - name: Fail if coverage below threshold
      if: steps.coverage-check.outcome == 'failure'
      run: |
        echo "❌ Coverage verification failed - 100% coverage required"
        exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run dependency vulnerability scan
      run: ./gradlew dependencyCheckAnalyze --continue
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          **/build/reports/dependency-check-report.html

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-jvm]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: eden_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Start test environment
      run: docker-compose -f docker-compose.yml up -d

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

    - name: Run integration tests
      run: ./gradlew integrationTest --continue
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/eden_test
        DATABASE_USER: testuser
        DATABASE_PASSWORD: testpass
        REDIS_URL: redis://localhost:6379

    - name: Stop test environment
      if: always()
      run: docker-compose -f docker-compose.yml down

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          **/build/reports/tests/
          **/build/test-results/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-jvm]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: eden_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run performance tests
      run: ./gradlew performanceTest --continue
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/eden_test
        DATABASE_USER: testuser
        DATABASE_PASSWORD: testpass
        REDIS_URL: redis://localhost:6379

    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: |
          **/build/reports/tests/
          **/build/test-results/
          **/build/reports/jmh/
          **/build/reports/gatling/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Start test environment
      run: docker-compose -f e2e-tests/docker-compose.test.yml up -d

    - name: Wait for services
      run: |
        timeout 120 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

    - name: Run E2E tests
      run: ./gradlew e2eTest --continue

    - name: Stop test environment
      if: always()
      run: docker-compose -f e2e-tests/docker-compose.test.yml down

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          **/build/reports/tests/
          **/build/test-results/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-jvm, test-js, test-native, coverage, security-scan, integration-tests, performance-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "## 🧪 Test Suite Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| JVM Tests | ${{ needs.test-jvm.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| JS Tests | ${{ needs.test-js.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Native Tests | ${{ needs.test-native.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Coverage | ${{ needs.coverage.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '⚠️ Warning' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || needs.performance-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Calculate overall status
        CORE_TESTS_PASSED=true
        if [[ "${{ needs.test-jvm.result }}" != "success" || "${{ needs.test-js.result }}" != "success" || "${{ needs.test-native.result }}" != "success" || "${{ needs.coverage.result }}" != "success" || "${{ needs.integration-tests.result }}" != "success" || "${{ needs.e2e-tests.result }}" != "success" ]]; then
          CORE_TESTS_PASSED=false
        fi
        
        if [[ "$CORE_TESTS_PASSED" == "true" ]]; then
          echo "🎉 All core tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Test Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage**: 100% (enforced)" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Types**: Unit, Integration, E2E, Performance" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: JVM, JS, Native (Linux, macOS, Windows)" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: Vulnerability scanning enabled" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some core tests failed. Please check the individual job results." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)" >> $GITHUB_STEP_SUMMARY
        echo "- [Performance Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)" >> $GITHUB_STEP_SUMMARY