name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: secret
          POSTGRES_USER: eden
          POSTGRES_DB: eden
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -short -v ./...
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: eden
        DB_USER: eden
        DB_PASSWORD: secret
        REDIS_HOST: localhost
        REDIS_PORT: 6379
    
    - name: Set version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Build binaries
      run: |
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -ldflags="-X main.version=${{ steps.version.outputs.version }}" -o eden-linux-amd64 ./cmd/eden/
        GOOS=linux GOARCH=arm64 go build -ldflags="-X main.version=${{ steps.version.outputs.version }}" -o eden-linux-arm64 ./cmd/eden/
        GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.version=${{ steps.version.outputs.version }}" -o eden-darwin-amd64 ./cmd/eden/
        GOOS=darwin GOARCH=arm64 go build -ldflags="-X main.version=${{ steps.version.outputs.version }}" -o eden-darwin-arm64 ./cmd/eden/
        GOOS=windows GOARCH=amd64 go build -ldflags="-X main.version=${{ steps.version.outputs.version }}" -o eden-windows-amd64.exe ./cmd/eden/
    
    - name: Create release notes
      run: |
        cat > release-notes.md << 'EOF'
        # Eden DevOps Suite ${{ steps.version.outputs.version }}
        
        ## Features
        - **8 Integrated Services** - Complete DevOps platform in a single binary
        - **Zero-Knowledge Secrets** - AES-256-GCM encryption with client-side security
        - **Workflow Automation** - Visual workflow designer with event-driven execution
        - **Multi-Cloud Support** - AWS, GCP, Azure, and Kubernetes integration
        - **Real-time Monitoring** - AI-powered anomaly detection and alerting
        - **Single Binary** - 19MB executable with all services included
        
        ## Core Services
        - **Vault** (Port 8080) - Secrets management with zero-knowledge architecture
        - **Flow** (Port 8081) - Workflow automation and orchestration
        - **Task** (Port 8082) - Distributed task processing and scheduling
        - **Monitor** (Port 8083) - Real-time monitoring and alerting
        - **Sync** (Port 8084) - Multi-cloud data synchronization
        - **Insight** (Port 8085) - Analytics and business intelligence
        - **Hub** (Port 8086) - Service discovery and integration
        - **API Gateway** (Port 8000) - Unified API entry point
        
        ## Installation
        
        ### Download Binary
        Download the appropriate binary for your platform from the assets below:
        
        **Linux (x64)**
        ```bash
        curl -L -o eden https://github.com/ataiva-software/eden/releases/download/${{ steps.version.outputs.version }}/eden-linux-amd64
        chmod +x eden
        sudo mv eden /usr/local/bin/
        ```
        
        **Linux (ARM64)**
        ```bash
        curl -L -o eden https://github.com/ataiva-software/eden/releases/download/${{ steps.version.outputs.version }}/eden-linux-arm64
        chmod +x eden
        sudo mv eden /usr/local/bin/
        ```
        
        **macOS (Intel)**
        ```bash
        curl -L -o eden https://github.com/ataiva-software/eden/releases/download/${{ steps.version.outputs.version }}/eden-darwin-amd64
        chmod +x eden
        sudo mv eden /usr/local/bin/
        ```
        
        **macOS (Apple Silicon)**
        ```bash
        curl -L -o eden https://github.com/ataiva-software/eden/releases/download/${{ steps.version.outputs.version }}/eden-darwin-arm64
        chmod +x eden
        sudo mv eden /usr/local/bin/
        ```
        
        **Windows**
        Download `eden-windows-amd64.exe` and add to your PATH.
        
        ### Install with Go
        ```bash
        go install github.com/ataiva-software/eden/cmd/eden@${{ steps.version.outputs.version }}
        ```
        
        ## Quick Start
        
        ```bash
        # Start dependencies (PostgreSQL + Redis)
        docker run -d --name postgres -e POSTGRES_PASSWORD=secret -e POSTGRES_USER=eden -e POSTGRES_DB=eden -p 5432:5432 postgres:15
        docker run -d --name redis -p 6379:6379 redis:7
        
        # Start all Eden services
        eden server
        
        # Use Eden CLI
        eden vault store my-secret "hello world"
        eden vault get my-secret
        eden status
        ```
        
        ## Docker Deployment
        
        ```bash
        # Using Docker Compose
        curl -L -o docker-compose.yml https://raw.githubusercontent.com/ataiva-software/eden/${{ steps.version.outputs.version }}/docker-compose.yml
        docker-compose up -d
        ```
        
        ## Documentation
        - [Quick Start Guide](https://github.com/ataiva-software/eden/blob/main/docs/getting-started/quick-start.md)
        - [CLI Reference](https://github.com/ataiva-software/eden/blob/main/docs/user-guide/cli-reference.md)
        - [Architecture Overview](https://github.com/ataiva-software/eden/blob/main/docs/architecture/overview.md)
        - [Security Guide](https://github.com/ataiva-software/eden/blob/main/docs/security/security-guide.md)
        EOF
    
    - name: Create or update tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
        git push origin ${{ steps.version.outputs.version }}
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Eden DevOps Suite ${{ steps.version.outputs.version }}
        body_path: release-notes.md
        files: |
          eden-linux-amd64
          eden-linux-arm64
          eden-darwin-amd64
          eden-darwin-arm64
          eden-windows-amd64.exe
        draft: false
        prerelease: false
