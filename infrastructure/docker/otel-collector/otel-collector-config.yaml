receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

processors:
  batch:
    # Send batch every 10 seconds or when batch size reaches 100 items
    timeout: 10s
    send_batch_size: 100

  memory_limiter:
    check_interval: 5s
    limit_mib: 1000
    spike_limit_mib: 200

  resource:
    attributes:
      - key: environment
        value: ${ENVIRONMENT:production}
        action: upsert
      - key: service.namespace
        value: eden
        action: upsert

  # Add service name to logs that don't have it
  transform:
    logs:
      queries:
        - context: resource
          statements:
            - set(attributes["service.name"], attributes["service.name"] ?? resource.attributes["service.name"] ?? "unknown")

  # Filter out health check and readiness probe requests
  filter:
    spans:
      exclude:
        match_type: regexp
        attributes:
          - key: http.url
            value: ".*(health|ready|live|metrics).*"

  # Add service dependencies based on spans
  servicegraph:
    store:
      ttl: 2h
    cache_size: 1000
    metrics:
      dimensions:
        - service.name
        - service.namespace

exporters:
  prometheus:
    endpoint: 0.0.0.0:8889
    namespace: eden
    send_timestamps: true
    metric_expiration: 180m
    resource_to_telemetry_conversion:
      enabled: true

  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true

  elasticsearch:
    endpoints: ["http://elasticsearch:9200"]
    index: eden-logs
    mapping:
      mode: ecs
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s

  logging:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200

  otlp/grafana:
    endpoint: tempo:4317
    tls:
      insecure: true

  zipkin:
    endpoint: "http://zipkin:9411/api/v2/spans"
    format: proto

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, filter, servicegraph]
      exporters: [otlp/jaeger, otlp/grafana, zipkin, logging]

    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, batch, resource]
      exporters: [prometheus, logging]

    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, transform]
      exporters: [elasticsearch, logging]

  extensions: [health_check, pprof, zpages]
  telemetry:
    logs:
      level: info
    metrics:
      address: 0.0.0.0:8888

extensions:
  health_check:
    endpoint: 0.0.0.0:13133

  pprof:
    endpoint: 0.0.0.0:1777

  zpages:
    endpoint: 0.0.0.0:55679