input {
  # Receive logs from Filebeat
  beats {
    port => 5044
    host => "0.0.0.0"
  }
  
  # Receive logs directly from TCP
  tcp {
    port => 5000
    codec => json
  }
  
  # Receive logs from OpenTelemetry Collector
  http {
    port => 8080
    codec => json
  }
}

filter {
  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }
  
  # Add timestamp if not present
  if ![timestamp] and [time] {
    mutate {
      add_field => { "timestamp" => "%{time}" }
    }
  }
  
  # Add timestamp if not present (using @timestamp)
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }
  
  # Parse log level
  if [level] {
    mutate {
      add_field => { "log_level" => "%{level}" }
    }
  } else if [severity] {
    mutate {
      add_field => { "log_level" => "%{severity}" }
    }
  }
  
  # Normalize log level
  if [log_level] {
    mutate {
      gsub => [
        "log_level", "(?i)trace", "TRACE",
        "log_level", "(?i)debug", "DEBUG",
        "log_level", "(?i)info", "INFO",
        "log_level", "(?i)warn", "WARN",
        "log_level", "(?i)error", "ERROR",
        "log_level", "(?i)fatal", "FATAL"
      ]
    }
  }
  
  # Add service name if not present
  if ![service.name] and [service] {
    mutate {
      add_field => { "[service][name]" => "%{service}" }
    }
  }
  
  # Add trace context if available
  if [trace_id] {
    mutate {
      add_field => { "[trace][id]" => "%{trace_id}" }
    }
  }
  
  if [span_id] {
    mutate {
      add_field => { "[span][id]" => "%{span_id}" }
    }
  }
  
  # Add kubernetes metadata if available
  if [kubernetes] {
    mutate {
      add_field => {
        "k8s_namespace" => "%{[kubernetes][namespace]}"
        "k8s_pod" => "%{[kubernetes][pod][name]}"
        "k8s_container" => "%{[kubernetes][container][name]}"
      }
    }
  }
  
  # Add host information
  if [host][name] {
    mutate {
      add_field => { "hostname" => "%{[host][name]}" }
    }
  }
  
  # Add timestamp for Elasticsearch
  date {
    match => [ "timestamp", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSSZ", "UNIX_MS" ]
    target => "@timestamp"
    remove_field => [ "timestamp" ]
  }
}

output {
  # Send logs to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "eden-logs-%{+YYYY.MM.dd}"
    document_type => "_doc"
    template_overwrite => true
  }
  
  # Debug output (uncomment for debugging)
  # stdout { codec => rubydebug }
}